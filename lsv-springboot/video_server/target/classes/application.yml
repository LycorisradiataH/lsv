spring:
  profiles: prod
  datasource:
    username: ${lsv.mysql.username}
    password: ${lsv.mysql.password}
    url: jdbc:mysql://${lsv.mysql.public-host}:${lsv.mysql.port}/${lsv.mysql.name}?useUnicode=true&characterEncoding=utf-8&serverTimezone=Asia/Shanghai&allowMultiQueries=true&rewriteBatchedStatements=true
    driver-class-name: com.mysql.cj.jdbc.Driver
    type: com.alibaba.druid.pool.DruidDataSource
    initial-size: 10 # 初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时
    min-idle: 20 # 最小连接池数量
    maxActive: 40 # 最大连接池数量
    maxWait: 60000 # 获取连接时最大等待时间，单位毫秒。配置了maxWait之后，缺省启用公平锁，并发效率会有所下降，如果需要可以通过配置
    timeBetweenEvictionRunsMillis: 60000 # 关闭空闲连接的检测时间间隔.Destroy线程会检测连接的间隔时间，如果连接空闲时间大于等于minEvictableIdleTimeMillis则关闭物理连接。
    minEvictableIdleTimeMillis: 300000 # 连接的最小生存时间.连接保持空闲而不被驱逐的最小时间
    validationQuery: SELECT 1 FROM DUAL # 验证数据库服务可用性的sql.用来检测连接是否有效的sql 因数据库方言而差, 例如 oracle 应该写成 SELECT 1 FROM DUAL
    testWhileIdle: true # 申请连接时检测空闲时间，根据空闲时间再检测连接是否有效.建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRun
    testOnBorrow: false # 申请连接时直接检测连接是否有效.申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。
    testOnReturn: false # 归还连接时检测连接是否有效.归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。
    poolPreparedStatements: true # 开启PSCache
    maxPoolPreparedStatementPerConnectionSize: 20 #设置PSCache值
    connectionErrorRetryAttempts: 3 # 连接出错后再尝试连接三次
    breakAfterAcquireFailure: true # 数据库服务宕机自动重连机制
    timeBetweenConnectErrorMillis: 300000 # 连接出错后重试时间间隔
    asyncInit: true # 异步初始化策略
    remove-abandoned: true # 是否自动回收超时连接
    remove-abandoned-timeout: 1800 # 超时时间(以秒数为单位)
    transaction-query-timeout: 10000 # 事务超时时间
    filters: stat,wall,log4j #数据库日志
    connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500
  # redis配置
  redis:
    host: ${lsv.redis.host}
    port: ${lsv.redis.port}
    password: ${lsv.redis.password}
  # mq配置
  rabbitmq:
    host: ${lsv.rabbitmq.host}
    port: ${lsv.rabbitmq.port}
    username: ${lsv.rabbitmq.username:guest}
    password: ${lsv.rabbitmq.password:guest}
    listener:
      simple:
        retry:
          enabled: true
          max-attempts: 3 #最大重试次数
          initial-interval: 3000 #重试间隔时间（单位毫秒）
  # 邮箱配置
  mail:
    host: ${lsv.mail.host}
    username: ${lsv.mail.username}
    password: ${lsv.mail.password}
    protocol: smtps
    port: 465
    default-encoding: UTF-8
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
            required: true
          socketFactory:
            class: javax.net.ssl.SSLSocketFactory
  # 文件上传大小
  servlet:
    multipart:
      enabled: true
      # 单个请求最大大小
      max-request-size: ${lsv.upload.max-request-size}
      # 单个文件最大大小
      max-file-size: ${lsv.upload.max-file-size}

mybatis-plus:
  mapper-locations: classpath:mapper/*.xml
  type-aliases-package: com.hidata.pojo
  # 关闭打印 mybatis-plus 的 LOGO
  global-config:
    banner: false

website:
  url: http://localhost/

logging:
  level:
    com:
      alibaba:
        nacos: error
      gargoylesoftware: off
    root: info
  config: classpath:logback-spring.xml
  file:
    path: /lsv/log/videoserver

# 上传模式 可选 oss 或 local
upload:
  mode: ${lsv.upload.mode}
  local:
    # nginx映射本地文件路径，无域名则为 ip:83
    url: ${lsv.upload.local.url}
    # 本地文件存储路径
    path: ${lsv.upload.local.path}
  oss:
    url: ${lsv.upload.oss.url}
    bucketName: ${lsv.upload.oss.bucketName}
    endpoint: ${lsv.upload.oss.endpoint}
    accessKeyId: ${lsv.upload.oss.accessKeyId}
    accessKeySecret: ${lsv.upload.oss.accessKeySecret}
    regionId: ${lsv.upload.oss.regionId}


# 暴露监控
management:
  endpoints:
    web:
      exposure:
        include: '*'
